generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String
  emailVerified    Boolean   @default(false)
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isAnonymous      Boolean?  @default(false)
  sessions         Session[]
  accounts         Account[]
  
  // Group relationships
  groupMemberships GroupMember[]
  personalGroupId  String?   @unique
  personalGroup    Group?    @relation("PersonalGroup", fields: [personalGroupId], references: [id])
  
  // Shopping list items created by this user
  createdShoppingListItems ShoppingListItem[] @relation("ShoppingListItemCreator")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
  @@index([userId])
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
  @@unique([accountId, providerId])
  @@index([userId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  inviteCode  String?   @unique
  isPersonal  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  members           GroupMember[]
  shoppingListItems ShoppingListItem[]
  personalUser      User?             @relation("PersonalGroup")
  
  @@map("group")
  @@index([inviteCode])
}

model GroupMember {
  id        String    @id @default(cuid())
  role      GroupRole @default(MEMBER)
  joinedAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Foreign keys
  userId    String
  groupId   String
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@unique([userId, groupId])
  @@map("group_member")
  @@index([groupId])
  @@index([userId])
}

enum GroupRole {
  ADMIN
  MEMBER
}

model ShoppingListItem {
  id          String   @id @default(cuid())
  name        String
  amount      Int      @default(1)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Group relationship instead of user
  groupId     String
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  // Track who created the item
  createdById String
  createdBy   User     @relation("ShoppingListItemCreator", fields: [createdById], references: [id], onDelete: Cascade)

  @@map("shopping_list_item")
  @@index([groupId])
  @@index([createdById])
  @@unique([groupId, name]) // Unique per group instead of per user
}

